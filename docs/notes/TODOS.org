* TODO Weather forecast monitor
** DONE Read config file
*** DONE Create a config file (YAML):
- locations: List[Location] (Define what is a location!) (maybe also a dataclass for parsing these?)
- high_temp: float
- low_temp: float
- checking_frequency: int (time in seconds)
** TODO Periodically get weather forecast data
*** TODO Define the function to get forecast data:
#+begin_src python
def get_forecast_data(weather_configuration: WeatherConfiguration) -> List[WeatherData]:
    pass
#+end_src

*** TODO Define and the needed dataclasses:
#+begin_src python
@dataclass
class WeatherConfiguration:
    pass


@dataclass
class WeatherData:
    pass
#+end_src
** TODO Check if any temperature limit is exceeded in the next five days
#+begin_src python
def check_data(weather_data: List[WeatherData]) -> List[WeatherData]):
    pass
#+end_src

** TODO Store the result
*** TODO Define the function that sends data to API
#+begin_src python
def send_data_to_API(weather_data: WeatherData) -> None:
    pass
#+end_src
* DONE Make the API
** DONE GET methods
- GET /forecasts returns:
  #+begin_src javascript
  [
    <forecast_object_1>,
    <forecast_object_2>,
    ...
  ]
  #+end_src
** DONE POST methods
- POST /forecast
  - request:
    #+begin_src javascript
    {
      forecasts: [
        <forecast_object_1>,
	<forecast_object_2>,
	...
      ]
      
    }
    #+end_src

  - response with appropriate status code.
* DONE SQLite database
** DONE Tables
*** DONE Forecast table

