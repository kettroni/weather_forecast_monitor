* Weather Forecast Monitor
Inspired by [[./docs/task.pdf][this exercise]] (read it).

This is a weather monitoring application that loops the following procedure:
1. fetches weather data from an API for the next 5 days,
2. checks if the given temperature limits are exceeded in the given locations,
3. logs the results of these checks,
4. sends the results of these checks to our own [[./api_server][API server]] which saves
   them to a database. (Results can be retrieved later via the same API server).

These loops are fired asynchronically every given frequency defined in the [[./config.yaml][config.yaml]].

* Table of contents
:PROPERTIES:
:TOC:      :include all :depth 2 :ignore (this)
:END:
:CONTENTS:
- [[#weather-forecast-monitor][Weather Forecast Monitor]]
- [[#usage][Usage]]
- [[#installation-guide][Installation guide]]
- [[#folder-structure][Folder structure]]
- [[#todos][TODOs]]
:END:

* Usage
** Preconditions
1. Install virtual environment for [[./api_server][API Server]].
2. Install virtual environment for the monitor itself (this READMEs installation guide).
3. Get a personal API key for OpenWeatherMap (by [[https://home.openweathermap.org/users/sign_up][creating a free account]]).

** Steps
1. Start a local API server on another terminal by following instructions from [[./api_server/README.org#Usage][API server usage]].
2. Configure the [[./monitor_config.yaml][monitor_config.yaml]] with needed parameters.
3. Configure the [[./monitors/open_weather_map_monitor/fetcher_config.yaml]]. Here you will need to add the API key for OpenWeatherMap.
4. Activate the virtual environment for the monitor.
#+begin_src shell
source .venv/bin/activate
#+end_src

5. Now you can run the monitor with:
#+begin_src shell
python main.py
#+end_src

   And you can stop the monitoring at any time by KeyboardInterrupt (Ctrl+C usually).

5. Log files are saved in [[./logs/][./logs/]].


* Installation guide
*Disclaimer: this installation is tested with Linux, steps might be different for different distributions.*
** Requirements
- Python 3.7.5 (might work with other versions too, this one is tested)

This also guide assumes that:
- you have opened a shell within this folder,
- your Python installation is called "python".

** 1. Create a virtual environment (venv) named ".venv" with python
#+begin_src shell
python -m venv .venv
#+end_src

** 2. Activate the virtual environment
#+begin_src shell
source .venv/bin/activate
#+end_src

** 3. Install the dependencies with pip and requirements.txt
Now you can easily get all the needed libraries for your python virtual environment:
#+begin_src shell
pip install -r requirements.txt
#+end_src

* Folder structure
** [[./api_server/]]
Root folder for the API server for saving data used in this example. Check out it's [[./api_server/README.org][README]].

** [[./docs/]]
Includes some documentation I used when starting to develop this app.


** [[./main.py][./main.py]]
This main module can run any ForecastMonitor implementation.
The default example is using the open_weather_map_monitor implementation.

** [[./models/]]
Includes general models, that can be used in many different implementations of this app.
*** [[./models/abstracts/]]
Abstract classes.

*** [[./models/config_classes/]]
Configuration classes.

*** [[./models/data/]]
Dataclasses.


** [[./monitor_config.yaml][./monitor_config.yaml]]
You can configure monitored locations, monitored temperatures and monitoring frequency here.

** [[./monitors/]]
Includes packages that are different implementations of monitors.

*** [[./monitors/forecast_monitor/]]
This is an implementation of a Monitor. This has different implementations for its sender and fetcher.

**** [[./monitors/forecast_monitor/open_weather_map_monitor/]]
This is an implementation of a ForecastMonitor. It has its unique APISender and APIFetcher classes
that are needed for the ForecastMonitor.

** [[./requirements.txt]]
Used for initializing a working virtual environment for this example.

** [[./utils/]]
Utility functions for initializing logging and loading configurations.

* TODOs
- UNIT TESTS!
- Better exception handling.
- Probably could use better documentation.
